<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MoneyDiary - Home</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'custom-green': '#1B352B',
                        'custom-green-hover': '#2ec61c'
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-gradient-to-b from-blue-50 to-white">
    <!-- Mobile Header -->
    <header class="lg:hidden flex justify-between items-center p-4 bg-white border-b">
        <button class="text-2xl" id="mobileMenuBtn">
            <i class="fas fa-bars"></i>
        </button>
        <h1 class="text-xl font-semibold">Home</h1>
        <div class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
            <span>PA</span>
        </div>
    </header>

    <div class="flex h-[calc(100vh-56px)] lg:h-screen">
        <!-- Sidebar - hidden on mobile by default -->
        <aside id="sidebar" class="hidden lg:block w-64 bg-custom-green text-white fixed lg:relative h-full z-50">
            <div class="p-6">
                <a href="/">
                    <div class="text-white font-bold text-2xl">MoneyDiary</div>
                </a>
                
                <nav class="space-y-4 mt-6">
                    <a href="/home" class="flex items-center space-x-3 text-white hover:text-custom-green-hover">
                        <i class="fas fa-home"></i>
                        <span>Home</span>
                    </a>
                    <a href="#" class="flex items-center space-x-3 text-white hover:text-custom-green-hover">
                        <i class="fas fa-exchange-alt"></i>
                        <span>All Transactions</span>
                    </a>
                    <a href="#" class="flex items-center space-x-3 text-gray-300 hover:text-white">
                        <i class="fas fa-users"></i>
                        <span>Recipients</span>
                    </a> 
                    <a href="/logout" class="flex items-center space-x-3 bg-red-500 hover:bg-red-900 p-2 rounded-md text-white hover:text-red-300">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Logout</span>
                    </a>
                    <a href="/whatsapp" class="flex items-center space-x-3 bg-white hover:bg-custom-green p-2 rounded-md text-green-600 hover:text-white">
                        <i class="fas fa-paper-plane"></i>
                        <span>Connect Whatsapp</span>
                    </a>                  
                </nav>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="flex-1 p-4 lg:p-8 overflow-y-auto">
            <!-- Tabs -->
            <div class="flex space-x-2 mb-6 bg-gray-100 p-1 rounded-lg">
                <a href="#" id="allButton" class="flex-1 px-4 py-2 bg-custom-green-hover text-white text-center font-bold hover:bg-custom-green rounded-md text-sm">All</a>                
                <a href="#" id="debitButton"class="flex-1 px-4 py-2 bg-custom-green-hover text-white text-center font-bold hover:bg-custom-green rounded-md text-sm">Debits</a>
                <a href="#" id="creditButton"class="flex-1 px-4 py-2 bg-custom-green-hover text-white text-center font-bold hover:bg-custom-green rounded-md text-sm">Credits</a>
            </div>

            <!-- Search -->
            <!-- <div class="mb-6">
                <div class="relative">
                    <input type="text" placeholder="Search transaction" 
                           class="w-full p-3 pl-10 border rounded-lg bg-white">
                    <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                </div>
            </div> -->

            <!-- Transactions List -->
            <div class="bg-white rounded-lg">
                <div class="flex justify-between items-center p-4">
                    <h2 class="text-lg font-semibold">All Transactions</h2>
                    <!-- <button class="px-4 py-1.5 border rounded-lg hover:bg-gray-50 text-sm">Export</button> -->
                </div>
                
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                            <tr class="border-y bg-gray-50">
                                <th class="p-4 w-8"><input type="checkbox" class="rounded"></th>
                                <th class="p-4 text-left font-medium">
                                    Date
                                </th>
                                <th class="p-4 text-left font-medium text-blue-600">Recipient</th>
                                <th class="p-4 text-left font-medium">Description</th>
                                <th class="p-4 text-left font-medium">Amount</th>
                                <th class="p-4 text-left font-medium">Category</th>
                            </tr>
                        </thead>
                        <tbody id="transactionTableBody">
                            <!-- Table rows will be inserted here by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <!-- Mobile Chat Button -->
    <button class="lg:hidden fixed bottom-4 right-4 w-12 h-12 bg-orange-500 rounded-full flex items-center justify-center text-white shadow-lg">
        <i class="fas fa-comments"></i>
    </button>

    <script>
        let all_transaction;
        // Mobile menu toggle
        const mobileMenuBtn = document.getElementById('mobileMenuBtn');
        const sidebar = document.getElementById('sidebar');
        
        mobileMenuBtn.addEventListener('click', () => {
            sidebar.classList.toggle('hidden');
        });
        
        // Handle Clicks
        const allButton = document.getElementById('allButton'); 
        const debitButton = document.getElementById('debitButton'); 
        const creditButton = document.getElementById('creditButton');
        const deleteButton = document.getElementById('deleteButton');


        // Function to handle button click 
        function handleButtonClick(event) { 
            // Remove active class from all buttons 
            allButton.classList.remove('bg-custom-green', 'text-white'); 
            debitButton.classList.remove('bg-custom-green', 'text-white'); 
            creditButton.classList.remove('bg-custom-green', 'text-white'); 
            
            // Add active class to clicked button 
            event.target.classList.add('bg-custom-green', 'text-white');

            // Handle specific button clicks 
            if (event.target === debitButton) { 
                const debitTransactions = all_transaction.filter(txn => txn.transaction_type === 'debit');
                renderTransactions(debitTransactions);
                // Add your specific handling for debitButton here
            } else if (event.target === creditButton) { 
                const creditTransactions = all_transaction.filter(txn => txn.transaction_type === 'credit');
                renderTransactions(creditTransactions); 
                // Add your specific handling for creditButton here 
            } else { 
                console.log('All button clicked'); 
                renderTransactions(all_transaction);
                // Reset all button to default or handle it as needed 
            }
        }

        // Add click event listeners to buttons 
        allButton.addEventListener('click', handleButtonClick); 
        debitButton.addEventListener('click', handleButtonClick); 
        creditButton.addEventListener('click', handleButtonClick);

        


        fetch('/all_transaction', {
            method: 'GET'
        })
            .then(response => response.json())
            .then(data => {
                if (data.length === 0) {
                    console.log('No transactions found.');
                }
                console.log(data);
                all_transaction = data;                
                renderTransactions(data);                 
            })
            .catch(error => {
                console.error('Error fetching all transactions:', error);
            });


            function formatISODate(isoString) {
                const dateObj = new Date(isoString);
                const year = dateObj.getFullYear(); 
                const month = (dateObj.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based 
                const day = dateObj.getDate().toString().padStart(2, '0'); 

                let hours = dateObj.getHours();
                const minutes = dateObj.getMinutes().toString().padStart(2, '0');
                const amPm = hours >= 12 ? 'PM' : 'AM';

                hours = (hours % 12) || 12; // Convert to 12-hour format, setting '12' for midnight and noon
                const formattedHours = hours.toString().padStart(2, '0'); // Ensure two digits for hours

                return `${year}-${month}-${day} ${formattedHours}:${minutes} ${amPm}`;
            }

        function renderTransactions(all_txn) {
            const tbody = document.getElementById('transactionTableBody');
            if (all_txn.length === 0) {
                tbody.innerHTML = '<p>Nothing to see here, Start logging your transactions asap!'
            } else {

                tbody.innerHTML = all_txn.map(tx => `
                    <tr class="border-b hover:bg-gray-50 data-transaction-id="${tx.id}">
                        <td class="p-4"><input type="checkbox" class="transaction-checkbox rounded data-transaction-id="${tx.id}"></td>
                        <td class="p-4">${formatISODate(tx['created_at'])}</td>
                        <td class="p-4 text-blue-600">${tx['recipient']}</td>
                        <td class="p-4">${tx['transaction_text']}</td>
                        <td class="p-4">₦${tx['amount']}</td>
                        <td class="p-4">
                            <span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-sm">
                             ${tx['usercategory.category.name']}
                            </span>
                        </td>
                        <td>
                            <button 
                            class="delete-button flex-1 px-4 py-2 bg-red-300 text-white text-center font-bold hover:bg-red-700 rounded-md text-sm hidden"
                            data-transaction-id="${tx.id}">
                            Delete
                            </button>
                        </td>
                    </tr>
                `).join('');

                addCheckboxListeners();
            }
        }

        function addCheckboxListeners() {
            const rows = document.querySelectorAll('#transactionTableBody tr');
    
            rows.forEach(row => {
                const checkbox = row.querySelector('.transaction-checkbox');
                const deleteButton = row.querySelector('.delete-button');
        
                if (checkbox && deleteButton) {
                    checkbox.addEventListener('change', () => {
                        // Toggle delete button visibility based on checkbox state
                        deleteButton.classList.toggle('hidden', !checkbox.checked);
                    });
                    
                    deleteButton.addEventListener('click', async (e) => {
                        e.preventDefault();
                        const transactionId = deleteButton.dataset.transactionId;
                        // console.log(transactionId);
                
                        try {
                            const response = await fetch('/transactions', {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json',
                                    // Add any auth headers if needed
                                    // 'Authorization': `Bearer ${yourAuthToken}`
                                },
                                body: JSON.stringify({ id:transactionId }),
                            });

                            if (response.ok) {
                                // Remove the row from the table
                                row.remove();
                                // Show success message
                                // showNotification('Transaction deleted successfully', 'success');
                            } else {
                                throw new Error('Failed to delete transaction');
                            }
                        } catch (error) {
                            console.error('Error deleting transaction:', error);
                            // showNotification('Failed to delete transaction', 'error');
                        }
                    });
                }
            });
        }

        // // Initialize the table
        // renderTransactions(all_txn);
    </script>

<%- include('partials/footer'); -%>